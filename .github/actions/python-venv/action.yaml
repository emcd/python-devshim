name: python-venv
description: 'Clones project, configures Python, and populates virtual environment.'
inputs:
  needs-clone:
    description: 'Clone repository or is it already cloned?'
    default: true
  python-version:
    description: 'Version of the Python interpreter.'
  use-versions-update:
    description: 'Decache updated Python version specifiers?'
    required: true
    default: false
runs:
  using: composite
  steps:
    - name: Construct Foundation
      if: "${{ 'true' == inputs.needs-clone }}"
      uses: emcd/python-devshim/.github/actions/clone@master
    - name: Restore Python Versions (if requested)
      if: "${{ 'true' == inputs.use-versions-update }}"
      uses: actions/download-artifact@v3
      with:
        name: python-versions
    - name: Select Python Version
      run: |
        set -eu
        if [[ -z '${{ inputs.python-version }}' ]]; then
            echo "DEVSHIM_PYTHON_VERSION=$(/usr/bin/python3 develop.py show.python)" >>${GITHUB_ENV}
        else
            echo "DEVSHIM_PYTHON_VERSION=${{ inputs.python-version }}" >>${GITHUB_ENV}
        fi
      shell: bash
    - name: Access Cache for Python and Virtual Environment
      id: python-cache
      uses: actions/cache@v3
      with:
        key: python--${{ env.DEVSHIM_PYTHON_VERSION }}--${{ runner.os }}--${{ hashFiles('.local/configuration/pypackages.fixtures.toml') }}
        path: |
          ~/.local/share/devshim/installations/python
          .local/environments
    - name: Install Python
      if: "${{ 'true' != steps.python-cache.outputs.cache-hit }}"
      run: /usr/bin/python3 develop.py install.python --version ${{ env.DEVSHIM_PYTHON_VERSION }}
      shell: bash
    - name: Create Virtual Environment
      if: "${{ 'true' != steps.python-cache.outputs.cache-hit }}"
      run: |
        set -eu
        /usr/bin/python3 develop.py build.python-venv --version ${{ env.DEVSHIM_PYTHON_VERSION }}
      shell: bash
